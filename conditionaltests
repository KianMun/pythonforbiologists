#sort by startswith and writing the sorted data into 2 separate files
file1 = open('four.txt', 'w')
file2 = open('five.txt', 'w')
file3 = open('six.txt', 'w')
accs = ['ab56', 'bh84', 'hv76', 'ap97', 'bd72']

for accession in accs:
    if accession.startswith('a'):
        file1.write(accession + '\n')
    elif accession.startswith('b'):
        file2.write(accession + '\n')
    else:
        file3.write(accession + '\n')

#while loops
count = 0
while count<10:
    print(count)
    count +=1

#nested if loops, i.e 2 or more condtions
accs =['ab56', 'bh84', 'hv76', 'ay93', 'ap97', 'bd72']
for accession in accs:
    if accession.startswith('a'):
        if accession.endswith('3'):
            print(accession)

#multiple conditions using "and"
accs =['ab56', 'bh84', 'hv76', 'ay93', 'ap97', 'bd72']
for accession in accs:
    if accession.startswith('a') and accession.endswith('3'):
        print(accession)

#multiple condtions using 'or' & 'and'
accs =['ab56', 'bh84', 'hv76', 'ay93', 'ap97', 'bd72']
for accession in accs:
    if (accession.startswith('a') or accession.startswith('b') and accession.endswith('4')):
        print(accession)
        
#multiple condtions using 'not'
accs = ['ab56', 'bh84', 'hv76', 'ay93', 'ap97', 'bd72']
for acc in accs:
    if acc.startswith('a') and not acc.startswith('ay'):
        print(acc)   

#true/false function if DNA is AT rich, where AT > 0.65
def is_at_rich(dna):
    length = len(dna)
    A_count = dna.upper().count('A')
    T_count = dna.upper().count('T')
    AT_count = A_count + T_count
    AT_content = AT_count/length
    if AT_content > 0.65:
        return True
    else:
        return False and AT_content
print(is_at_rich('ATATATATATTTTAT'))
print(is_at_rich('GCATCGGCCATGCAT'))

#true/false function if DNA is AT rich, where AT > 0.65
#A more concise and easier to read version of the above function
def is_AT_rich(dna):
    length = len(dna)
    A_count = dna.upper().count('A')
    T_coubt = dna.upper().count('T')
    AT_count = A_count + T_coubt
    AT_content = AT_count/length
    return AT_content > 0.65
print(is_AT_rich('ATATATATATTTTAT'))
print(is_AT_rich('GCATCGGCCATGCAT'))

#Print out the gene names for all genes belonging to Drosophila melanogaster or
#Drosophila simulans.
data = open(r'C:\Users\kianmun80\PycharmProjects\pythonforbiologist_1\exercises and examples\conditional_tests\exercises\data.csv')

for line in data:
    columns = line.rstrip("\n").split(",")
    species = columns[0]
    sequence = columns[1]
    gene_name = columns[2]
    expression = columns[3]
    if species =='Drosophila melanogaster':
        print(gene_name)

#Print out the gene names for all genes between 90 and 110 bases long.
for line in data:
    columns = line.rstrip('\n').split(",")
    species = columns[0]
    sequence = columns[1]
    gene_name = columns[2]
    expression = columns[3]
    if len(sequence)>90 and len(sequence)<110:
        print(gene_name)

#Print out the gene names for all genes whose AT content is less than 0.5 and whose
#expression level is greater than 200
for line in data:
    columns = line.rstrip('\n').split(',')
    speices = columns[0]
    sequence = columns[1]
    gene_name = columns[2]
    expression = columns[3]
    length = len(sequence)
    A_count = sequence.upper().count('A')
    T_coubt = sequence.upper().count('T')
    AT_count = A_count + T_coubt
    AT_content = AT_count/length
    if AT_content < 0.5 and int(expression) > 200:
        print (gene_name)
