import re

#finding position of motif in a dna sequence
dna = "ATCGCAAAAAAATTTTTTGGGGGGAATTCAC"
if re.search(r'GAATTC', dna):
    print(dna.find('GAATTC'))

#'|' to find either or character
dna = "ATCGCGAGGACCATTCAC"
if re.search(r"GG(A|T)CC", dna):
    print('found!')

dna = "ATCGCGAATTCAC"
if re.search(r"GC(A|T|G|C)GC", dna):
    print("restriction site found!")
#or as below:
if re.search(r'GC[ATGC]GC', dna):
    print('restriction site found')

#specifying characters that I don't want to match with "^"
if re.search(r"GC[^AT]GC",dna):
    print('restriction site found')
else:
    print('Not found')

dna = 'ATGACGTACGTACGACTG'

#store the match object in the variable m
m = re.search(r"GA[ATGC]{3}AC",dna)
print(m.group(), 'Position in string: ', dna.find(m.group()))


#Capture bits of the pattern by supplying an argument to
# the group method. group(1) will return the bit of the string matched by the
# section of the pattern in the first set of parentheses, group(2) will return the bit
# matched by the second

dna = "ATGACGTACGTACGACTG"

m = re.search(r"GA([ATGC]{3})AC([ATGC]{2})AC", dna)
print('entire match: ', m.group())
print('first bit: ', m.group(1))
print('second bit: ', m.group(2))

#Getting position of a match using 'start' and 'end' methods

#python counts from 0 zero
print('start: ', str(m.start()))
print('end: ', str(m.end()))
