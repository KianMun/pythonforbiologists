import re

#finding position of motif in a dna sequence
dna = "ATCGCAAAAAAATTTTTTGGGGGGAATTCAC"
if re.search(r'GAATTC', dna):
    print(dna.find('GAATTC'))

#'|' to find either or character
dna = "ATCGCGAGGACCATTCAC"
if re.search(r"GG(A|T)CC", dna):
    print('found!')

dna = "ATCGCGAATTCAC"
if re.search(r"GC(A|T|G|C)GC", dna):
    print("restriction site found!")
#or as below:
if re.search(r'GC[ATGC]GC', dna):
    print('restriction site found')

#specifying characters that I don't want to match with "^"
if re.search(r"GC[^AT]GC",dna):
    print('restriction site found')
else:
    print('Not found')

dna = 'ATGACGTACGTACGACTG'

#store the match object in the variable m
m = re.search(r"GA[ATGC]{3}AC",dna)
print(m.group(), 'Position in string: ', dna.find(m.group()))


#Capture bits of the pattern by supplying an argument to
# the group method. group(1) will return the bit of the string matched by the
# section of the pattern in the first set of parentheses, group(2) will return the bit
# matched by the second

dna = "ATGACGTACGTACGACTG"

m = re.search(r"GA([ATGC]{3})AC([ATGC]{2})AC", dna)
print('entire match: ', m.group())
print('first bit: ', m.group(1))
print('second bit: ', m.group(2))

#Getting position of a match using 'start' and 'end' methods

#python counts from 0 zero
print('start: ', str(m.start()))
print('end: ', str(m.end()))

#We can get the start and end positions of individual groups by supplying a number
#as the argument to start and end

print('group one start: ', str(m.start(1)))
print('group one end: ', str(m.end(1)))
print('group two start: ', str(m.start(2)))
print('group two end: ', str(m.end(2)))

#Spliting string using regular expression
#Splitting the DNA string whenever a base isn't A, T, G or C
dna_split = "ACTNGCATRGCTACGTYACGATSCGAWTCG"
runs = re.split(r"[^ATGC]", dna_split)
print(runs)

#finding multiple matches - re.findall, re.findall only returns a list of strings, it has no attribute 'start', so it
#won't return a position and will throw an error
dna_findall = "ACTGCATTATATCGTACGAAATTATACGCGCG"
runs_findall = re.findall(r'[AT]{4,100}', dna_findall)
print(runs_findall)

#finding multiple matches with positions using - re.finditer
#re.finditer returns a sequence of match objects
#re.finditer gives more flexibility than findall
dna_finditer = "ACTGCATTATATCGTACGAAATTATACGCGCG"
runs_finditer = re.finditer(r'[AT]{3,100}', dna_finditer)
for match in runs_finditer:
    runs_finditer_start = match.start()
    runs_finditer_end = match.end()
    print("AT rich region from " + str(runs_finditer_start) + " to " + str(runs_finditer_end))
 
#######################################################################################################################################
#Regular Expressions Exercises

import re
gene_acc_names = ['xkn59438', 'yhdck2', 'eihd39d9', 'chdsye847', 'hedle3455', 'xjhd53e', '45da', 'de37dp']

#acc contains '5'
for acc in gene_acc_names:
    if re.search(r"5",acc):
        print('Accession with the number 5: ', acc)

#acc contains 'd or e'
for acc in gene_acc_names:
    if re.search(r"(d|e)",acc):
        print('Accesion with d or e: ', acc)

#acc contains 'd follow by e'
for acc in gene_acc_names:
    if re.search(r"d.*e", acc):
#We have to be careful with our quantifiers, however – at first glance the pattern
#d.+e looks good, but it will fail to match the accession where e follows d directly.
#To allow for the fact that d might be immediately followed by e, we need to use the
#asterisk
        print('Accesion with d follow by e: ', acc) 

#contain the letters d and e in that order with a single letter between them
for acc in gene_acc_names:
    if re.search(r"(d.e)", acc):
        print('Accesion with d and letter in between follow by e: ', acc)
    
#contain both the letters d and e in any order
for acc in gene_acc_names:
    if re.search(r"d.*e", acc) or re.search(r"e.*d", acc):
        print('Accesion with d and e in any order: ', acc)
    
#start with x or y
for acc in gene_acc_names:
    if re.search(r"^(x|y)", acc):
        print('Accession with x or y: ', acc)

#start with x or y and end with e
#".*" to match any number of any character
for acc in gene_acc_names:
    if re.search(r"^(x|y).*e$", acc):
        print('Acc start with x or y and end with e: ', acc)

#contain 3 or more numbers in a row
#"\d" is the character group for digits.
#{3,}, upper bound left empty to match it with no upper limit
for acc in gene_acc_names:
    if re.search(r"\d{3,}", acc):
        print('Acc that contain 3 or more numbers in a row: ', acc)

#end with d followed by either a, r or p
for acc in gene_acc_names:
    if re.search(r"d[arp]$", acc):
        print('Acc end with d followed a, r or p: ', acc)

#######################################################################################################################################
import re

#In the chapter_7 file inside the exercises download, there's a file called dna.txt
#which contains a made-up DNA sequence. Predict the fragment lengths that we will
#get if we digest the sequence with two made-up restriction enzymes – AbcI, whose
#recognition site is ANT*AAT, and AbcII, whose recognition site is GCRW*TG
#(asterisks indicate the position of the cut site).

##AbcI##

fhandle = open(r"C:\Users\kianmun80\PycharmProjects\pythonforbiologist_1\exercises and examples\regular_expressions\exercises\dna.txt")
dna = fhandle.read().rstrip("\n")
#recognition site is ANT*AAT for AbcI
for match in re.finditer(r"A[ATGC]TAAT", dna):
    #as the cut is 3 bases upstream to the start, hence +3
    cut_site = (match.start()+3)
    print('Fragment cut site are: ',cut_site)

#calculating the fragment size
#creating a list of starting pos, cut site and end pos
#so that can use it to subtract the previous pos to calculate the fragments
all_cuts = [0]

for match in re.finditer(r"A[ATGC]TAAT",dna):
    match_site = (match.start()+3)
    all_cuts.append(match_site)
all_cuts.append(len(dna))
print(all_cuts)

#range from 2nd position[1], using 2nd position size subtract the preceding 1st position
#and iterate down the range to get the different fragment sizes
for i in range (1,len(all_cuts)):
    this_cut_position = all_cuts[i]
    previous_cut_position = all_cuts[i-1]
    fragment_size = this_cut_position - previous_cut_position
    print('Fragment size is: ', fragment_size)

##AbcII##
